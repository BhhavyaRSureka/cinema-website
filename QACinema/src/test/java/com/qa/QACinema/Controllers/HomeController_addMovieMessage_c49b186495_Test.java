// ********RoostGPT********
/*
Test generated by RoostGPT for test JavaTesting using AI Type Open Source AI and AI Model deepseek-6.7B

Sure, here are some test scenarios that you can use to validate the business logic of the `addMovieMessage` method:

1. **Test with a valid MovieMessage object**

   - Create a `MovieMessage` object with a valid `creationDate`.
   - Call the `addMovieMessage` method with this object.
   - Verify that the `creationDate` of the `MovieMessage` object is not null.
   - Verify that the `MovieMessage` object is successfully inserted into the database.

2. **Test with a null MovieMessage object**

   - Call the `addMovieMessage` method with a null object.
   - Verify that an exception is thrown.

3. **Test with a MovieMessage object without a creationDate**

   - Create a `MovieMessage` object without a `creationDate`.
   - Call the `addMovieMessage` method with this object.
   - Verify that the `creationDate` of the `MovieMessage` object is set to the current date and time.
   - Verify that the `MovieMessage` object is successfully inserted into the database.

4. **Test with a MovieMessage object with an invalid creationDate**

   - Create a `MovieMessage` object with an invalid `creationDate`.
   - Call the `addMovieMessage` method with this object.
   - Verify that an exception is thrown.

5. **Test with a MovieMessage object with a null movieId**

   - Create a `MovieMessage` object with a null `movieId`.
   - Call the `addMovieMessage` method with this object.
   - Verify that the `MovieMessage` object is successfully inserted into the database.

6. **Test with a MovieMessage object with a null userId**

   - Create a `MovieMessage` object with a null `userId`.
   - Call the `addMovieMessage` method with this object.
   - Verify that the `MovieMessage` object is successfully inserted into the database.

7. **Test with a MovieMessage object with a null message**

   - Create a `MovieMessage` object with a null `message`.
   - Call the `addMovieMessage` method with this object.
   - Verify that the `MovieMessage` object is successfully inserted into the database.

8. **Test with a MovieMessage object with a null screenId**

   - Create a `MovieMessage` object with a null `screenId`.
   - Call the `addMovieMessage` method with this object.
   - Verify that the `MovieMessage` object is successfully inserted into the database.

Remember to mock the `moviemsgService` to ensure that the `insert` method is called with the correct parameters.

*/

// ********RoostGPT********
```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Date;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class HomeControllerTest {

    @InjectMocks
    private HomeController homeController;

    @Mock
    private MovieMessageService moviemsgService;

    @Test
    public void testAddMovieMessage_ValidMovieMessage() {
        MovieMessage movie = new MovieMessage();
        movie.setCreationDate(new Date());
        homeController.addMovieMessage(movie);
        verify(moviemsgService, times(1)).insert(movie);
    }

    @Test
    public void testAddMovieMessage_NullMovieMessage() {
        assertThrows(NullPointerException.class, () -> homeController.addMovieMessage(null));
    }

    @Test
    public void testAddMovieMessage_MovieMessageWithoutCreationDate() {
        MovieMessage movie = new MovieMessage();
        homeController.addMovieMessage(movie);
        assertNotNull(movie.getCreationDate());
        verify(moviemsgService, times(1)).insert(movie);
    }

    // Add more test cases as per your requirements
}
```
