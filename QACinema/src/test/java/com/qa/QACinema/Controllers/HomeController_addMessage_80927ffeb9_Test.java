// ********RoostGPT********
/*
Test generated by RoostGPT for test JavaTesting using AI Type Open Source AI and AI Model deepseek-6.7B

Sure, here are some test scenarios that you can use to validate the business logic of the `addMessage` method:

1. **Test with a valid GeneralMessage object**

   - Create a GeneralMessage object with a valid message, user, and screen.
   - Call the `addMessage` method with this object.
   - Verify that the message was added to the database.

2. **Test with a GeneralMessage object without a user**

   - Create a GeneralMessage object with a valid message and screen, but without a user.
   - Call the `addMessage` method with this object.
   - Verify that the message was not added to the database.

3. **Test with a GeneralMessage object without a screen**

   - Create a GeneralMessage object with a valid message and user, but without a screen.
   - Call the `addMessage` method with this object.
   - Verify that the message was not added to the database.

4. **Test with a GeneralMessage object with a null creationDate**

   - Create a GeneralMessage object with a valid message, user, and screen, but with a null creationDate.
   - Call the `addMessage` method with this object.
   - Verify that the creationDate was set to the current date and time.

5. **Test with a GeneralMessage object with a non-null creationDate**

   - Create a GeneralMessage object with a valid message, user, and screen, and a non-null creationDate.
   - Call the `addMessage` method with this object.
   - Verify that the creationDate was not changed.

Please note that these test scenarios assume that the `gmService.insert(gm)` method is correctly implemented to add the message to the database. You would need to write additional test code to verify this behavior.

*/

// ********RoostGPT********
```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Date;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class HomeControllerTest {

    @InjectMocks
    private HomeController homeController;

    @Mock
    private GeneralMessageService gmService;

    @Test
    public void testAddMessage_ValidGeneralMessage() {
        GeneralMessage gm = new GeneralMessage();
        gm.setMessage("Test message");
        gm.setUser(new User());
        gm.setScreen(new Screen());

        homeController.addMessage(gm);

        verify(gmService, times(1)).insert(gm);
    }

    @Test
    public void testAddMessage_GeneralMessageWithoutUser() {
        GeneralMessage gm = new GeneralMessage();
        gm.setMessage("Test message");
        gm.setScreen(new Screen());

        homeController.addMessage(gm);

        verify(gmService, never()).insert(gm);
    }

    @Test
    public void testAddMessage_GeneralMessageWithoutScreen() {
        GeneralMessage gm = new GeneralMessage();
        gm.setMessage("Test message");
        gm.setUser(new User());

        homeController.addMessage(gm);

        verify(gmService, never()).insert(gm);
    }

    @Test
    public void testAddMessage_GeneralMessageWithNullCreationDate() {
        GeneralMessage gm = new GeneralMessage();
        gm.setMessage("Test message");
        gm.setUser(new User());
        gm.setScreen(new Screen());

        homeController.addMessage(gm);

        assertNotNull(gm.getCreationDate());
    }

    @Test
    public void testAddMessage_GeneralMessageWithNonNullCreationDate() {
        GeneralMessage gm = new GeneralMessage();
        gm.setMessage("Test message");
        gm.setUser(new User());
        gm.setScreen(new Screen());
        gm.setCreationDate(new Date());

        homeController.addMessage(gm);

        assertSame(gm.getCreationDate(), new Date());
    }
}
```
