// ********RoostGPT********
/*
Test generated by RoostGPT for test JavaTesting using AI Type Open Source AI and AI Model deepseek-6.7B

Sure, here are some test scenarios you can consider:

1. **Test with a user with an expired account**

   Create a user with an expired account. Call the `isAccountNonExpired()` method on this user and verify that it returns `false`.

2. **Test with a user with an non-expired account**

   Create a user with a non-expired account. Call the `isAccountNonExpired()` method on this user and verify that it returns `true`.

3. **Test with a null user**

   Pass a null user to the `isAccountNonExpired()` method. Verify that it throws a NullPointerException.

4. **Test with a user with no roles**

   Create a user with no roles. Call the `isAccountNonExpired()` method on this user and verify that it returns `true`.

5. **Test with a user with an expired role**

   Create a user with an expired role. Call the `isAccountNonExpired()` method on this user and verify that it returns `false`.

6. **Test with a user with a non-expired role**

   Create a user with a non-expired role. Call the `isAccountNonExpired()` method on this user and verify that it returns `true`.

7. **Test with a user with a null role**

   Create a user with a null role. Call the `isAccountNonExpired()` method on this user and verify that it returns `true`, as the method should not throw a NullPointerException.

Remember, the `isAccountNonExpired()` method in your code snippet always returns `true`. If you want to test the method with different scenarios, you should modify the method to return `false` for expired accounts.

*/

// ********RoostGPT********
```java
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.security.core.userdetails.UserDetails;
import com.qa.QACinema.Entities.User;
import com.qa.QACinema.Entities.Role;
import java.util.ArrayList;
import java.util.List;

@RunWith(MockitoJUnitRunner.class)
public class CustomUserDetails_isAccountNonExpired_1875f479de_Test {

    @Mock
    private User user;

    @Mock
    private Role role;

    @Test
    public void testIsAccountNonExpired_withExpiredAccount() {
        Mockito.when(user.isAccountNonExpired()).thenReturn(false);
        Assert.assertFalse(user.isAccountNonExpired());
    }

    @Test
    public void testIsAccountNonExpired_withNonExpiredAccount() {
        Mockito.when(user.isAccountNonExpired()).thenReturn(true);
        Assert.assertTrue(user.isAccountNonExpired());
    }

    @Test(expected = NullPointerException.class)
    public void testIsAccountNonExpired_withNullUser() {
        UserDetails userDetails = null;
        userDetails.isAccountNonExpired();
    }

    @Test
    public void testIsAccountNonExpired_withNoRoles() {
        Mockito.when(user.getRoles()).thenReturn(new ArrayList<>());
        Assert.assertTrue(user.isAccountNonExpired());
    }

    @Test
    public void testIsAccountNonExpired_withExpiredRole() {
        List<Role> roles = new ArrayList<>();
        roles.add(role);
        Mockito.when(role.isExpired()).thenReturn(true);
        Mockito.when(user.getRoles()).thenReturn(roles);
        Assert.assertFalse(user.isAccountNonExpired());
    }

    @Test
    public void testIsAccountNonExpired_withNonExpiredRole() {
        List<Role> roles = new ArrayList<>();
        roles.add(role);
        Mockito.when(role.isExpired()).thenReturn(false);
        Mockito.when(user.getRoles()).thenReturn(roles);
        Assert.assertTrue(user.isAccountNonExpired());
    }

    @Test
    public void testIsAccountNonExpired_withNullRole() {
        List<Role> roles = new ArrayList<>();
        roles.add(null);
        Mockito.when(user.getRoles()).thenReturn(roles);
        Assert.assertTrue(user.isAccountNonExpired());
    }
}
```
