// ********RoostGPT********
/*
Test generated by RoostGPT for test JavaTesting using AI Type Open Source AI and AI Model deepseek-6.7B

Sure, here are some test scenarios you can use to validate the `isAccountNonLocked` method:

1. **Test with a user with locked account**

   Create a `User` object with `isAccountNonLocked` set to `false`. Call `isAccountNonLocked` on this object and verify that it returns `false`.

2. **Test with a user with unlocked account**

   Create a `User` object with `isAccountNonLocked` set to `true`. Call `isAccountNonLocked` on this object and verify that it returns `true`.

3. **Test with a null user**

   Call `isAccountNonLocked` on a `null` object and verify that it throws a `NullPointerException`.

4. **Test with a user with no roles**

   Create a `User` object with no roles. Call `isAccountNonLocked` on this object and verify that it returns `true`, as the account is considered non-locked even if it has no roles.

5. **Test with a user with admin role**

   Create a `User` object with an admin role. Call `isAccountNonLocked` on this object and verify that it returns `true`, as the account is considered non-locked even if it has an admin role.

6. **Test with a user with locked account and admin role**

   Create a `User` object with `isAccountNonLocked` set to `false` and an admin role. Call `isAccountNonLocked` on this object and verify that it returns `false`.

Remember, the `isAccountNonLocked` method should only consider the `isAccountNonLocked` field of the `User` object, not the roles or other properties of the `User` object.

*/

// ********RoostGPT********
```java
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import com.qa.QACinema.Entities.User;
import com.qa.QACinema.Entities.Role;
import java.util.ArrayList;
import java.util.List;

@RunWith(MockitoJUnitRunner.class)
public class CustomUserDetails_isAccountNonLocked_f7b514125a_Test {

    @Mock
    private User user;

    @Test
    public void testIsAccountNonLocked_withLockedAccount() {
        Mockito.when(user.isAccountNonLocked()).thenReturn(false);
        Assert.assertFalse(user.isAccountNonLocked());
    }

    @Test
    public void testIsAccountNonLocked_withUnlockedAccount() {
        Mockito.when(user.isAccountNonLocked()).thenReturn(true);
        Assert.assertTrue(user.isAccountNonLocked());
    }

    @Test(expected = NullPointerException.class)
    public void testIsAccountNonLocked_withNullUser() {
        User nullUser = null;
        nullUser.isAccountNonLocked();
    }

    @Test
    public void testIsAccountNonLocked_withNoRoles() {
        Mockito.when(user.getRoles()).thenReturn(new ArrayList<>());
        Assert.assertTrue(user.isAccountNonLocked());
    }

    @Test
    public void testIsAccountNonLocked_withAdminRole() {
        Role adminRole = Mockito.mock(Role.class);
        Mockito.when(adminRole.getName()).thenReturn("ADMIN");
        List<Role> roles = new ArrayList<>();
        roles.add(adminRole);
        Mockito.when(user.getRoles()).thenReturn(roles);
        Assert.assertTrue(user.isAccountNonLocked());
    }

    @Test
    public void testIsAccountNonLocked_withLockedAccountAndAdminRole() {
        Role adminRole = Mockito.mock(Role.class);
        Mockito.when(adminRole.getName()).thenReturn("ADMIN");
        List<Role> roles = new ArrayList<>();
        roles.add(adminRole);
        Mockito.when(user.getRoles()).thenReturn(roles);
        Mockito.when(user.isAccountNonLocked()).thenReturn(false);
        Assert.assertFalse(user.isAccountNonLocked());
    }
}
```
