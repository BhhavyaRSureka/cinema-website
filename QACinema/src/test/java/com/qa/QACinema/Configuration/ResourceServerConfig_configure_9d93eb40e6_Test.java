// ********RoostGPT********
/*
Test generated by RoostGPT for test JavaTesting using AI Type Open Source AI and AI Model deepseek-6.7B

Sure, here are some test scenarios that you can use to validate the business logic of the code snippet:

1. Test when the user is not authenticated and tries to access the "/private" URL. The user should be redirected to the login page.
2. Test when the user is not authenticated and tries to access the "/Screen" URL. The user should be redirected to the login page.
3. Test when the user is not authenticated and tries to access any other URL. The user should be able to access it without any restrictions.
4. Test when the user is authenticated and tries to access the "/private" URL. The user should be able to access it without any restrictions.
5. Test when the user is authenticated and tries to access the "/Screen" URL. The user should be able to access it without any restrictions.
6. Test when the user is authenticated and tries to access any other URL. The user should be able to access it without any restrictions.

These test scenarios can be used to validate the business logic of the code snippet. They ensure that the correct URLs are accessible to authenticated and unauthenticated users.

*/

// ********RoostGPT********
```java
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

@WebMvcTest(ResourceServerConfig.class)
public class ResourceServerConfigTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testUnauthenticatedAccess() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/private"))
                .andExpect(MockMvcResultMatchers.status().isFound());

        mockMvc.perform(MockMvcRequestBuilders.get("/Screen"))
                .andExpect(MockMvcResultMatchers.status().isFound());

        mockMvc.perform(MockMvcRequestBuilders.get("/"))
                .andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    @WithMockUser(username = "user", roles = {"USER"})
    public void testAuthenticatedAccess() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/private"))
                .andExpect(MockMvcResultMatchers.status().isOk());

        mockMvc.perform(MockMvcRequestBuilders.get("/Screen"))
                .andExpect(MockMvcResultMatchers.status().isOk());

        mockMvc.perform(MockMvcRequestBuilders.get("/"))
                .andExpect(MockMvcResultMatchers.status().isOk());
    }
}
```
