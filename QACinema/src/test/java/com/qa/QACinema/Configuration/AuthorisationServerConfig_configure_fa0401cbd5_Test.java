// ********RoostGPT********
/*
Test generated by RoostGPT for test JavaTesting using AI Type Open Source AI and AI Model deepseek-6.7B

Sure, here are some test scenarios that you can use to validate the business logic of the code snippet:

1. **Test Case 1: Validate Client Details**
   - Description: Verify that the client details are correctly configured in the `ClientDetailsServiceConfigurer`.
   - Steps: 
     - Call the `configure` method with a mock `ClientDetailsServiceConfigurer`.
     - Verify that the client details are correctly set.

2. **Test Case 2: Validate Authorized Grant Types**
   - Description: Verify that the authorized grant types are correctly configured.
   - Steps: 
     - Call the `configure` method with a mock `ClientDetailsServiceConfigurer`.
     - Verify that the authorized grant types are "client_credentials" and "password".

3. **Test Case 3: Validate Authorities**
   - Description: Verify that the authorities are correctly configured.
   - Steps: 
     - Call the `configure` method with a mock `ClientDetailsServiceConfigurer`.
     - Verify that the authorities are "ROLE_CLIENT", "ROLE_TRUSTED_CLIENT".

4. **Test Case 4: Validate Scopes**
   - Description: Verify that the scopes are correctly configured.
   - Steps: 
     - Call the `configure` method with a mock `ClientDetailsServiceConfigurer`.
     - Verify that the scopes are "read", "write", "trust".

5. **Test Case 5: Validate Resource IDs**
   - Description: Verify that the resource IDs are correctly configured.
   - Steps: 
     - Call the `configure` method with a mock `ClientDetailsServiceConfigurer`.
     - Verify that the resource IDs are "oauth2-resource".

6. **Test Case 6: Validate Access Token Validity**
   - Description: Verify that the access token validity is correctly configured.
   - Steps: 
     - Call the `configure` method with a mock `ClientDetailsServiceConfigurer`.
     - Verify that the access token validity is 5000 seconds.

7. **Test Case 7: Validate Client Secret**
   - Description: Verify that the client secret is correctly configured.
   - Steps: 
     - Call the `configure` method with a mock `ClientDetailsServiceConfigurer`.
     - Verify that the client secret is "secret".

Please note that these test cases are based on the assumption that the `configure` method is the only method that configures the client details. If there are other methods in the class that also configure client details, you would need to add additional test cases for those methods as well.

*/

// ********RoostGPT********
```java
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class AuthorisationServerConfig_configure_fa0401cbd5_Test {

    @Mock
    private ClientDetailsServiceConfigurer clients;

    @Test
    public void testConfigure() throws Exception {
        AuthorisationServerConfig config = new AuthorisationServerConfig();
        config.configure(clients);

        verify(clients, times(1)).inMemory();
        verify(clients, times(1)).withClient("my-trusted-client");
        verify(clients, times(1)).authorizedGrantTypes("client_credentials", "password");
        verify(clients, times(1)).authorities("ROLE_CLIENT", "ROLE_TRUSTED_CLIENT");
        verify(clients, times(1)).scopes("read", "write", "trust");
        verify(clients, times(1)).resourceIds("oauth2-resource");
        verify(clients, times(1)).accessTokenValiditySeconds(5000);
        verify(clients, times(1)).secret("secret");
    }
}
```
